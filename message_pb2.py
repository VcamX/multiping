# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: message.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='message.proto',
  package='multiping',
  syntax='proto3',
  serialized_pb=_b('\n\rmessage.proto\x12\tmultiping\"\x11\n\x0fPlatformRequest\"A\n\rPlatformReply\x12\x0e\n\x06system\x18\x01 \x01(\t\x12\x0f\n\x07release\x18\x02 \x01(\t\x12\x0f\n\x07machine\x18\x03 \x01(\t2S\n\rCommunication\x12\x42\n\x08Platform\x12\x1a.multiping.PlatformRequest\x1a\x18.multiping.PlatformReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PLATFORMREQUEST = _descriptor.Descriptor(
  name='PlatformRequest',
  full_name='multiping.PlatformRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=45,
)


_PLATFORMREPLY = _descriptor.Descriptor(
  name='PlatformReply',
  full_name='multiping.PlatformReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='system', full_name='multiping.PlatformReply.system', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='release', full_name='multiping.PlatformReply.release', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='machine', full_name='multiping.PlatformReply.machine', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=47,
  serialized_end=112,
)

DESCRIPTOR.message_types_by_name['PlatformRequest'] = _PLATFORMREQUEST
DESCRIPTOR.message_types_by_name['PlatformReply'] = _PLATFORMREPLY

PlatformRequest = _reflection.GeneratedProtocolMessageType('PlatformRequest', (_message.Message,), dict(
  DESCRIPTOR = _PLATFORMREQUEST,
  __module__ = 'message_pb2'
  # @@protoc_insertion_point(class_scope:multiping.PlatformRequest)
  ))
_sym_db.RegisterMessage(PlatformRequest)

PlatformReply = _reflection.GeneratedProtocolMessageType('PlatformReply', (_message.Message,), dict(
  DESCRIPTOR = _PLATFORMREPLY,
  __module__ = 'message_pb2'
  # @@protoc_insertion_point(class_scope:multiping.PlatformReply)
  ))
_sym_db.RegisterMessage(PlatformReply)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaCommunicationServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Platform(self, request, context):
    raise NotImplementedError()

class BetaCommunicationStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Platform(self, request, timeout):
    raise NotImplementedError()
  Platform.future = None

def beta_create_Communication_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import message_pb2
  import message_pb2
  request_deserializers = {
    ('multiping.Communication', 'Platform'): message_pb2.PlatformRequest.FromString,
  }
  response_serializers = {
    ('multiping.Communication', 'Platform'): message_pb2.PlatformReply.SerializeToString,
  }
  method_implementations = {
    ('multiping.Communication', 'Platform'): face_utilities.unary_unary_inline(servicer.Platform),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_Communication_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import message_pb2
  import message_pb2
  request_serializers = {
    ('multiping.Communication', 'Platform'): message_pb2.PlatformRequest.SerializeToString,
  }
  response_deserializers = {
    ('multiping.Communication', 'Platform'): message_pb2.PlatformReply.FromString,
  }
  cardinalities = {
    'Platform': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'multiping.Communication', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
